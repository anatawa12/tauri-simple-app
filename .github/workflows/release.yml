name: Release

on:
  workflow_dispatch:

jobs:
  build-rust:
    name: Build rust
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: x86_64-unknown-linux-gnu
            on: ubuntu-latest
            setup: |
              sudo apt update && sudo apt install -y lld
              ld.lld --version

              sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
            rustflags: "-C link-arg=-fuse-ld=lld"
            dist-path: |
              bundle/appimage/tauri-simple-app_${VERSION}_amd64.AppImage:tauri-simple-app-${VERSION}-x86_64.AppImage

          - triple: x86_64-pc-windows-msvc
            on: windows-latest
            esigner: true
            dist-path: |
              tauri-simple-app.exe:tauri-simple-app-${VERSION}-x86_64.exe

          - triple: universal-apple-darwin
            on: macos-14
            setup: |
              rustup target add aarch64-apple-darwin
              rustup target add x86_64-apple-darwin
            dist-path: |
              bundle/dmg/tauri-simple-app_${VERSION}_universal.dmg:tauri-simple-app-${VERSION}-universal.dmg

        triple:
          - x86_64-unknown-linux-gnu
          #- aarch64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          #- aarch64-pc-windows-msvc
          - universal-apple-darwin

    runs-on: ${{ matrix.on }}
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}

    steps:
      - uses: actions/checkout@v4

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        if: ${{ matrix.triple != 'universal-apple-darwin' }}
        with:
          target: ${{ matrix.triple }}
      - name: install tauri
        run: npm ci

      - name: Setup
        run: ${{ matrix.setup }}

      - uses: tauri-apps/tauri-action@v0
        with:
          tauriScript: npm run tauri
          args: |
            --target ${{ matrix.triple }}

      - name: Move artifacts
        shell: bash
        env:
          DIST_PATH: ${{ matrix.dist-path }}
        run: |-
          mkdir artifacts

          VERSION=$(<Cargo.toml grep '^version = ' | head -1 | cut -d= -f2 | cut -d'"' -f2)

          echo "$DIST_PATH" | while IFS=: read -r src dst; do
            src="${src//\$\{VERSION\}/$VERSION}"
            dst="${dst//\$\{VERSION\}/$VERSION}"
            if [ -z "$dst" ]; then
              continue
            fi
            printf "mv %s %s\n" "target/${{ matrix.triple }}/release/$src" "artifacts/$dst"
            mv "target/${{ matrix.triple }}/release/$src" "artifacts/$dst"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.triple }}
          path: artifacts/*

  publish-to-github:
    name: Publish to GitHub
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [ build-rust ]
    steps:
      - uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: assets
          pattern: artifacts-*
          merge-multiple: true

      - name: Push tag and create
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          VERSION=$(<Cargo.toml grep '^version = ' | head -1 | cut -d= -f2 | cut -d'"' -f2)

          # set tag and publish current version
          git tag "$VERSION"
          git push --tags
          sleep 1

          gh release create \
            --latest=false \
            --verify-tag "$VERSION" \
            assets/*
